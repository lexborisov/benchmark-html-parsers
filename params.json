{
  "name": "Benchmark-html-persers",
  "tagline": "Benchmark for HTML Parsers conformant with the HTML5 specification",
  "body": "Hi there!\r\n\r\nAfter posting [the previous article], I've got lots of emails asking to show and prove how one solution is better than another.\r\nI enthusiastically got down to comparisons, but it's all usually a little bit trickier than at first sight.\r\n\r\nYes, in this article I suggest taking out and measuring all the parsers!\r\n\r\n### Let's get started!\r\n\r\nBefore comparing anything, we've got to figure out: what are we really going to compare?! HTML parsers, but what is it?\r\n\r\nAn HTML parser is:\r\n1. Tokenizer — breaking text down into tokens\r\n1. Tree Builder — placing tokens in “correct positions” in a tree\r\n1. Tree follow-up\r\n\r\nSomeone out of the blue might say: “There's no need to build a tree for HTML parsing, it's enough to get tokens.” Unfortunately, they're wrong.\r\nActually, for correct HTML tokenization, we should have a tree at hand. Points 1 and 2 go as one.\r\n\r\nHere're 2 examples:\r\n\r\nExample 1:\r\n```html\r\n<svg><desc><math><style><a>\r\n```\r\nThe result of correct processing:\r\n```html\r\n<html>\r\n  <head>\r\n  <body>\r\n    <svg:svg>\r\n      <desc:svg>\r\n        <math:math>\r\n          <style:math>\r\n            <a:math>\r\n```\r\nExample 2:\r\n```html\r\n<svg><desc><style><a>\r\n```\r\nThe result of correct processing:\r\n```html\r\n<html>\r\n  <head>\r\n  <body>\r\n    <svg:svg>\r\n      <desc:svg>\r\n        <style>\r\n          <-text>: <a>\r\n```\r\n\r\nAfter “:” comes namespace, if unspecified then html.\r\n\r\nAs the examples show, the STYLE element behaves differently — depending on its position. The 1st variant has the element A, while in the 2nd it's already a text element.Here I can give examples with “frameset”, “script”, “title”... and their different behavior, but I guess you have the general idea.\r\n\r\nNow we can draw a conclusion that breakdown into tokens can't be correctly done without building an HTML tree. Consequently, HTML parsing can't be done without at least 2 stages: tokenization and tree building.\r\nAs to the terms: “strict”, “failing the spec”, “light”, “HTML 4”, and the like... I'm sure one can safely replace all these terms with 1: “doesn't process correctly.” It's all absurd. \r\n\r\n### How and What to Compare?\r\n\r\nHere comes the point. An HTML parser is too proud a name for everything. Moreover, even those dubbed HTML tokenizers aren't actually such.\r\nWith all the parsers at hand, I wonder what and with what to compare? So let's compare true parsers:\r\n\r\nMyHTML, HTML5Lib, HTML5Ever, Gumbo.\r\n\r\nIt's them that comply with the latest spec, and their result will match what we can see in present-day browsers.\r\nUntrue parsers (failing the spec) may greatly vary in speed / memory, but it's a fat lot of use since they process a document incorrectly.\r\nNo runarounds like “a parser for HTML 4” will count. Things always change, and we've got to keep pace with them.\r\n\r\nI should say HTML5Ever isn't an absolutely true parser. Authors write it doesn't pass all html5lin-test-tree-builder tests for correct tree building. It became true for its efforts.\r\nAt the moment of writing this article, HTML5Lib wasn't building the tree for some HTML formats correctly. But it's all bugs the authors will hopefully fix.\r\n\r\nLet's measure time / memory for 466 HTML files by Alexa TOP500. 466, not 500, because not all websites are running or open their content.\r\n\r\nFor each page, a fork will be made with the stages:\r\n1. Complete parser initialization\r\n1. 1 page parsing\r\n1. Resource deallocation\r\n\r\nThere'll also be an ex vivo test — running all the pages with 1 object, where possible. Everything will occur sequentially.\r\n\r\n### Down to the tests!\r\n\r\nThe following have been qualified for our tests: MyHTML, HTML5Ever, Gumbo.\r\n\r\nSadly, HTML5Lib failed testing. A prerun proved it's much slower than the others. There's no use comparing it — it's written on Python and is very, very slow.\r\n\r\nMyHTML and Gumbo are written on C. HTML5Ever — it’s Rust. I'm not good in Rust, not yet, so I asked Alexey Voznyuk to help me. Alexey agreed (kudos to him!) and made a C wrapper for parser testing.\r\n\r\nRuntime test results:\r\n![time benchmark html parsers](https://raw.githubusercontent.com/lexborisov/benchmark-html-persers/master/Results/time/benchmark_0_500_990.png)\r\n\r\nResource consumption test results:\r\n![memory benchmark html parsers](https://raw.githubusercontent.com/lexborisov/benchmark-html-persers/master/Results/mem/benchmark_0_500_990.png)\r\n\r\nRuntime test results divided by 100\r\n![](https://raw.githubusercontent.com/lexborisov/benchmark-html-persers/master/Results/time/benchmark_0_100_990.png)\r\n![](https://raw.githubusercontent.com/lexborisov/benchmark-html-persers/master/Results/time/benchmark_100_200_990.png)\r\n![](https://raw.githubusercontent.com/lexborisov/benchmark-html-persers/master/Results/time/benchmark_200_300_990.png)\r\n![](https://raw.githubusercontent.com/lexborisov/benchmark-html-persers/master/Results/time/benchmark_300_400_990.png)\r\n![](https://raw.githubusercontent.com/lexborisov/benchmark-html-persers/master/Results/time/benchmark_400_500_990.png)\r\n\r\nResource consumption results divided by 100\r\n![](https://raw.githubusercontent.com/lexborisov/benchmark-html-persers/master/Results/mem/benchmark_0_100_990.png)\r\n![](https://raw.githubusercontent.com/lexborisov/benchmark-html-persers/master/Results/mem/benchmark_100_200_990.png)\r\n![](https://raw.githubusercontent.com/lexborisov/benchmark-html-persers/master/Results/mem/benchmark_200_300_990.png)\r\n![](https://raw.githubusercontent.com/lexborisov/benchmark-html-persers/master/Results/mem/benchmark_300_400_990.png)\r\n![](https://raw.githubusercontent.com/lexborisov/benchmark-html-persers/master/Results/mem/benchmark_400_500_990.png)\r\n\r\nEx vivo test result. Running all (466) pages in 1 process:\r\n\r\n_MyHTML_:\r\n    Overall time: 0.50890; Memory at the beginning: 1052672; Memory at the end: 32120832\r\n_Gumbo_:\r\n    Overall time: 6.12951; Memory at the beginning: 1052672; Memory at the end: 29319168\r\n_HTML5Ever_:\r\n    Overall time: 4.50536; Memory at the beginning: 1052672; Memory at the end: 30715904\r\n\r\n### Totals\r\n\r\nThe undisputed leader in speed is MyHTML. Gumbo is the memory leader, not surprisingly. HTML5Ever has fallen flat, to put it mildly. The latter was neither quick nor good in memory, it can be used only on Rust.\r\n\r\nThe ex vivo test has shown little differences in memory, although really gigantic ones in speed.\r\n\r\n### Things used\r\n\r\nHardware: \r\n* Intel® Core(TM) i7-3615QM CPU @ 2.30GHz\r\n* 8 Gb 1600 MHz DDR3\r\n\r\nSoftware: \r\n* Darwin MBP-Alexander 15.3.0 Darwin Kernel Version 15.3.0: Thu Dec 10 18:40:58 PST 2015; root:xnu-3248.30.4~1/RELEASE_X86_64 x86_64\r\n* Apple LLVM version 7.0.2 (clang-700.1.81)\r\n* Target: x86_64-apple-darwin15.3.0\r\n* Thread model: posix\r\n\r\n### Links\r\n\r\n[Benchmark code]\r\n[Images and CSV]\r\n[MyHTML], [Gumbo], [HTML5Ever]\r\n[API for HTML5Event] by Alexey\r\n\r\n_**Thanks for reading!**_\r\n\r\n\r\n### P.S. by MyHTML's author\r\n\r\nAs MyHTML's author, I found it morally hard doing such testing. However, I tried to deal with the matter with greatest responsibility and treat each parser as my own.\r\n\r\n\r\n[the previous article]: https://www.reddit.com/r/programming/comments/49yqal/fast_html_parser_on_pure_c_with_posix_threads/\r\n[Benchmark code]: https://github.com/lexborisov/benchmark-html-persers\r\n[Images and CSV]: https://github.com/lexborisov/benchmark-html-persers/tree/master/Results\r\n[MyHTML]: https://github.com/lexborisov/myhtml\r\n[Gumbo]: https://github.com/google/gumbo-parser\r\n[HTML5Ever]: https://github.com/servo/html5ever\r\n[API for HTML5Event]: https://github.com/swizard0/html2html_lib\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}